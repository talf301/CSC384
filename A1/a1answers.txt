%% ----------------------------------------------------------
%%    Answers to Questions of Part II, Assignment 1

%% Instructions: 

%% Please edit this file in the following way to answer the text
%% questions of Assignment 1. 

%% - Please enter your name and student number in the space provided.

%% - Please replace any occurrence of '[yes/no]' with either 'yes' or
%% 'no' to answer the respective question.

%% - Where applicable, replace any occurrence of '[explain in less than N words]' 
%%   with an explanation containing no more than N words. 
 
%% - Do not remove any other lines.

%% - Any line starting with a '%' will be ignored.

%% - Submit this file electronically.

%% ----------------------------------------------------------

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%%  CSC384 Winter 2014, Assignment 1
%%
%%  NAME: Tal Friedman
%%
%%  STUDENT NUMBER: 999875899
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



/* ------------------------------------------------------ */
<Question 4>
%% [Heuristics I]
%% Explain in a few sentences how your heuristic works.
[explain in less than 200 words]
My heuristic is essentially an augmented manhattan heuristic. It finds the rectangle bounded at opposite vertices by the current location and the goal, and then counts the number of obstacles inside this rectangle and adds this to the Manhattan distance. So the rule of thumb here is that if there are more obstacles "between" the current position and the goal, it will probably take longer.

/* ------------------------------------------------------ */
<Question 5>
%% [Heuristics II]
%% Which of the four heuristics are admissible?
<5. 1 Null>
[yes/no]
yes

<5.2 Manhattan>
[yes/no]
yes

<5.3 Rounded Euclidean>
[yes/no]
yes

<5.4  Your Heuristic>
[yes/no]
no

%% For any which is not admissible give a counter example.
<5.5 Counter examples>
[explain in less than 400 words]
For my heuristic, since it counts the number of obstacles in the center, if for instance we had a 7x7 maze with our starting point at 1/1, and our goal at 7/7. Then if the entire center 5x5 block was obstacles, then even though the actual cost to travel from the start to the goal is 12, our heuristic would give 12+25=37.

/* ------------------------------------------------------ */
<Question 6>
%% [Heuristics III]
%% Suppose we modify the cost function so that moving to the left 
%% now costs 0.5, and all other moves still cost 1.
%% Which of the heuristics are admissible now? 
<6.1 Null>
[yes/no]
yes

<6.2 Manhattan>
[yes/no]
no

<6.3 Rounded Euclidean>
[yes/no]
no

<6.4 Your Heuristic>
[yes/no]
no
%% For any which is not admissible, give a counter example.
%% (To save space, you may refer to counter examples from a previous 
%% question if applicable.)
<6.5 Counter examples>
[explain in less than 400 words]
For both the Manhattan distance and the rounded Euclidean, consider a 7x1 maze with the start at 1/7 and goal at 1/1. Then both of our heuristics here would estimate a cost of 6 to travel from the start to the goal, when actually the cost is only 3 (since we make 6 moves to the left each only costing 0.5). The example that was previously used to show that my heuristic is not admissible still holds in this case.

/* ------------------------------------------------------ */
<Question 7>
%% [Heuristics IV]
%% For the original problem, imagine the robot would also be able to move
%% diagonally (with the same cost 1). Which of the four heuristics will
%% be admissible for this new problem?  
<7.1 Null>
[yes/no]
yes

<7.2 Manhattan>
[yes/no]
no

<7.3 Rounded Euclidean>
[yes/no]
yes

<7.4 Your Heuristic>
[yes/no]
no
%% For any which is not admissible, give a counter example.
%% (To save space, you may refer to counter examples from a previous
%% question if applicable.)
<7.5 Counter examples>
[explain in less than 400 words]
For the Manhattan distance heuristic, consider a 5x5 maze with no obstacles in it, with the goal at 5/5. The from 1/1, our Manhattan distance heuristic will estimate the cost at 8, when actually this can be done at cost 4 by just going diagonally. Once again, the first counter example used to show that my heuristic is not admissible still holds in this case, and in fact since my heuristic adds to the Manhattan distance heuristic which is now not admissible, mine can not be either in this situation (so we don't really even need a seperate counter example for it).


/* ------------------------------------------------------ */
<Question 8>
%% [Performance]
%% Run your implementation on each of the 3 given mazes and 3
%%  provided search routines (use go/2, goCC/2, goIDA/2). 
%%  For each of the 9 maze/search routine combinations use each of 
%%  the 4 heuristics (i.e.,~totalling 36 runs). Note that not all problems 
%%  may be solvable with all heuristics with the node limit set in the algorithms. 
%%  The node limit is 10,000 for the astar/astarcC searches 
%%  and 30,000 for  the idastar search.
%%  Then, fill in the table below that compares the numbers of nodes expanded by
%%  each of the provided search algorithms for all four heuristics.
%%  If a search does not terminate within the given node limit, 
%%  indicate it with ">limit" in the table

<8.1 Table>

         |             | # nodes   | # nodes    | # nodes  |
   Maze  | Heuristic   | for A*    |  for A*-CC | for IDA* |
   ------+-------------+-----------+------------+----------+
   maze1 | Null        |  6808     |  62        | >limit   |
   ------+-------------+-----------+------------+----------+
   maze1 | Manhattan   |  2283     |  50        | 4355     |
   ------+-------------+-----------+------------+----------+
   maze1 | Euclidian   |  2566     |  56        | 8729     | 
   ------+-------------+-----------+------------+----------+ 
   maze1 | MyHeuristic |  1560     |  51        | 2009     | 
   ------+-------------+-----------+------------+----------+
   maze2 | Null        |  >limit   |  71        | >limit   |
   ------+-------------+-----------+------------+----------+
   maze2 | Manhattan   |  23       |  20        | 80       |
   ------+-------------+-----------+------------+----------+
   maze2 | Euclidian   |  2484     |  63        | 2818     | 
   ------+-------------+-----------+------------+----------+
   maze2 | MyHeuristic |  23       |  20        | 26       | 
   ------+-------------+-----------+------------+----------+
   maze3 | Null        |  >limit   |  57        | >limit   |
   ------+-------------+-----------+------------+----------+
   maze3 | Manhattan   |  1973     |  46        | 5160     |
   ------+-------------+-----------+------------+----------+
   maze3 | Euclidian   |  >limit   |  46        | 29163    | 
   ------+-------------+-----------+------------+----------+
   maze3 | MyHeuristic |  364      |  35        | 1866     | 
   ------+-------------+-----------+------------+----------+


  
% Now, based on the results in the above table, draw your conclusions about the
% quality of the heuristics and the search routines.
<8.2 Conclusions>
[explain in less than 200 words]
Fortunately, in our results, the data has come out such that we get searches and heuristics being better than others in all cases (at least if we define "better" as "expanding fewer nodes"). In terms of the searches, our data shows that A*-CC is by far the fastest search, while A* was a little faster than IDA*, at least for the cases where they both found a solution before hitting the node limit. In terms of the heuristics, we see that all of our heuristics improved on an uninformed search (since a null heuristic is essentially an uninformed search), and that the Manhattan heuristic was generally faster than the Euclidian heuristic, in some cases being faster by a couple of orders of magnitude (depending on the structure of the maze). Finally, my heuristic was at worst very similar to the Manhattan heuristic, and at best considerably faster. However, something important to realize about my heuristic is that since it is not admissible, there is a distinct possibility that it will not find the optimal solution, and in fact for the IDA search on mazes 2 and 3 it did not find the optimal solution.


/* ------------------------------------------------------ */
<Question 9>
%% [State Representation]
%% Imagine a variant of the maze problem where 
%% the player initially has a number of JumpOnObstacle pills.
%% The player can move on top of an obstacle position if he still has
%% at least one of these pills available (in effect this work as if 
%% there was no obstacle there).
%% Note that moving on top of an obstacle will consume one pill.
%% How would you minimally represent the states for this problem and what 
%% changes to the successors predicate will you need to make?
%% Do not write any code, briefly explain in English.
<9>
[explain in less than 200 words]

To accommodate for these new pills, we will add a value to our state representation containing the number of pills currently remaining. So to change the successors predicate, all we would need to do is for all successors found by our current function, we leave the pill value the same (that is, if we can't move over rocks). Then, we add any possible moves which would move us onto a rock, subtracting 1 from the current pill count (provided that our pill count is above 0, otherwise it simply becomes the same successors function as we currently have).



